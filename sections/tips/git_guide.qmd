---
title: "{{< fa brands git-alt >}} Git' it"
author: "`Corentin DUCLOUX`"
include-in-header: 
  text: |
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
---

## Contexte

:::: {layout="[ 50, 50 ]"}

::: {#first-column}

![üßΩ Bob se met √† **Git**](imgs/spongebob_confused.jpg){.lightbox}

:::

::: {#second-column}

Pour impressionner son patron, *Bob* souhaite inventer une nouvelle recette de p√¢t√© de crabe‚Ñ¢ r√©volutionnaire (dit-il).

Malheureusement, *Bob* change tr√®s souvent d'avis : au fur et √† mesure de ses exp√©rimentations culinaires, il ajoute et retire un grand nombre d'ingr√©dients dans sa recette.

De plus, *Bob* n'est pas tr√®s assidu et oublie de noter l'ensemble des changements d'une version de recette √† l'autre. Finalement, il ne retrouve plus sa recette pr√©f√©r√©e dans ses notes...

Par chance, *Bob* se souvient d'avoir entendu son ami *Patrick* raconter tout un tas de belles histoires sur **Git**, un "syst√®me de contr√¥le de version" (honn√™tement, *Bob* ne sait pas du tout ce que √ßa veut dire).

Avec une grande pr√©sence d'esprit, *Bob* d√©cide alors de jeter toutes ses exp√©rimentations √† la poubelle, et de repartir sur de bonnes bases.
:::

::::

## Le contr√¥le de version


::: {.callout-note}

Un syst√®me de contr√¥le de version permet d'enregistrer les modifications apport√©es √† un fichier ou un ensemble de fichiers au fil du temps pour pouvoir √©ventuellement revenir √† des versions sp√©cifiques ult√©rieurement, comparer des modifications, voir qui a introduit un probl√®me et quand, etc. 

:::

Le contr√¥le de version le plus utilis√© est aussi le plus intuitif : copier des fichiers dans un autre r√©pertoire. Cette approche simple est particuli√®rement sujette aux erreurs, comme *Bob* l'a d√©montr√©.

Dans ce guide, *Patrick* va donc aider *Bob* √† faire du contr√¥le de version pour son projet de recette.

## L'histoire de Git

**Git** est un DVCS^[Syst√®me de contr√¥le de version distribu√©.] open source cr√©√© par *Linus Torvalds* en 2005 pour remplacer **BitKeeper** en tant que  syst√®me de contr√¥le de version du kernel {{< fa brands linux >}} [Linux](https://fr.wikipedia.org/wiki/Linux).

## Architecure d'un repository Git

Un repository ou d√©p√¥t **Git** contient 3 zones principales :

1. **Working Directory** : Espace de travail classique
2. **Staging Area** : Espace de transit des fichiers *(Index)*
3. **Local Repository** : Historique de commits Git  

```{mermaid}
%%| fig-align: center
graph LR;
    A["fa:fa-folder-tree Working Directory"]:::wd
    B["fa:fa-copy Staging Area"]:::staging
    C["fa:fa-database Local Repository"]:::repo
    A -. <code>git add</code> .-> B
    B -. <code>git commit</code> .-> C

    classDef wd fill:#f54d27, color:#fff
    classDef staging fill:#ffc500, color:#fff
    classDef repo fill:#00909a, color:#fff
```

## Utilisation de Git

### Initialisation d'un repository

Apr√®s avoir pr√©alablement cr√©e un dossier vide pour sa recette, *Bob* doit se positionner dedans. *Patrick* lui explique qu'il faut utiliser la commande `cd` (change directory), puis `git init` pour initialiser le **repository**. 

```bash
cd "C:/Users/Bob/recipe"
```

```bash
git init
```
Une fois cette commande √©x√©cut√©e, *Bob* constate l'apparition d'un nouveau sous-r√©pertoire *.git* cach√© qui contient tous les fichiers n√©cessaires pour le repository. 

### Clonage de repository

M√™me si cette option n'int√©resse pas *Bob*, *Patrick* lui explique qu'il est m√™me possible de cloner un projet existant, par exemple : 

```bash
git clone "https://github.com/CDucloux/Quarto_Website.git"
```

### Ajout de fichiers et validation des changements 

Apr√®s cette l√©g√®re partie de configuration, *Bob* commence √† √©crire sa recette dans le fichier `recipe.txt`, et finit par √™tre plut√¥t satisfait du r√©sultat.

Il ajoute donc le fichier √† la **Staging Area** avec la commande suivante :

```bash
git add "recipe.txt"
```

::: {.callout-tip}

## Ajout en masse

Si *Bob* poss√®de aussi d'autres fichiers dans son repository, et qu'il n'a pas envie de faire la m√™me manipulation pour chaque fichier, il peut utiliser `git add .` pour tout ajouter.

```bash
git add . 
```

:::

Changements des Etats de fichiers : 

Untracked (U) $\Rightarrow$ Non suivi (pour les nouveaux fichiers)

Index Added (A) $\Rightarrow$ means that you have marked a modified file in its current version to go into your next commit snapshot

Index Modified

Modified (M) $\Rightarrow$ Modifi√© mais pas ajout√© √† l'index

```bash
git commit -m "Recette de Bob, beta"
```

```bash
git reset
```

git rm --cached

```bash
git status *
```
secrets ingr√©dients => gitignore


- .gitignore

### Branches

- explication strat√©gie de branches ,etc

git reflog

## Pour aller plus loin

### GitFlow

- `git flow init`

- `git tag` $\Rightarrow$ Pour faire des versions

‚ö† En pratique on ne code JAMAIS sur la branche `develop`. On ouvre des branches de features puis on les ferme. 

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%
gitGraph
    commit id: "initial commit"
    branch develop
    commit id: "feat(modules): ..."

```

### Hooks

- git hooks

### Pipeline CI

- Github actions, gitlab quick actions


Extensions VSCODE :

- Git Graph
- Conventional Commits