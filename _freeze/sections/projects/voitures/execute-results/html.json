{
  "hash": "67b5094f1f5b57c2f26ab35b5d65655d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"🚗 Optimisation Linéaire\"\ntitle-block-banner: true\nauthor: \"`Corentin DUCLOUX`\"\ncategories: [\"Python\", \"Jupyter\"]\ndescription: \"Analyse de la production de voitures dans le cadre du cours d'**Optimisation sous Python** de Master 1.\"\ndate: 12-11-2023\ndate-format: DD/MM/YYYY\nnumber-sections: true\nexecute: \n  enabled: true\n---\n\n## Introduction au problème I\n\nL'entreprise *Car-Nivor* souhaite se lancer dans la production de voitures et a déjà imaginé plusieurs modèles. Elle commence par analyser le marché avec les modèles **Tiger (A)** et **Piranha (B)**. \n\nVoici les informations qui ressortent de cette analyse :\n\n- Le modèle **A** lui apporte un bénéfice de 3 000 € par unité vendue, tandis que le modèle **B** lui apporte un bénéfice de 2 000 € par unité vendue.\n- La production d'une voiture de modèle **A** prend 2 heures tandis que celle d'une voiture de modèle **B** prend seulement 1 heure^[Ces valeurs sont clairement fantaisistes et ne reflètent pas du tout le temps moyen d'assemblage réel d'une voiture, qui dépend de nombreux facteurs.].\n- Pour des raisons d'absorption de marché, *Car-Nivor* ne peut pas vendre plus de 100 modèles **A**, 100 modèles **B** et 150 voitures **(A+B)** au total par mois.\n- Enfin, l'usine de production n'est disponible que 200 heures par mois.\n\n## Modélisation du problème I\n\n> Avant de se lancer tête baissée dans l'utilisation d'un modèle de **Boosting**, réfléchissons un peu et posons-nous quelques questions.\n\n1. **Quelles quantités peut-on faire varier ?** $\\Rightarrow$ Les quantités de modèles **A** et **B**.\n2. **Que cherche-t-on à optimiser ?** $\\Rightarrow$ Le profit de *Car-Nivor*.\n3. **Quelles sont les contraintes du problème ?** $\\Rightarrow$ Les contraintes de production et les contraintes de marché\n\n:::callout-note\n\nOn voit en fait qu'on peut formuler cet énoncé sous la forme d'un problème d'optimisation linéaire sous contraintes !\n\n:::\n\nPlus précisément, on considère les notations suivantes :\n\n- $x_1$ est la quantité vendue de modèle **A**,\n- $x_2$ est la quantité vendue de modèle **B**,\n- $M_1$ est le bénéfice en k€ par unité vendue de modèle **A**,\n- $M_2$ est le bénéfice en k€ par unité vendue de modèle **B**,\n- $z$ est le profit de *Car-nivor*, qu'on souhaite maximiser -- on parle de **fonction objectif**,\n- $S$ correspond à l'ensemble des contraintes du problème.\n\n***\n\n$$\n\\max_{slc \\hspace{1mm} (S)} z = M_1x_1 + M_2x_2\n$$\n\n$$\n\\max_{slc \\hspace{1mm} (S)} z = 3x_1 + 2x_2\n$$\n\n$$\n(S) : \\left \\{ \n\\begin{array}\\\\\n    x_1\\geq 0 \\hspace{0.1em} ; \\hspace{0.1em} x_2 \\geq 0\\\\\n    x_1 \\leq 100 \\\\\n    x_2 \\leq 100 \\\\\n    2x_1 + x_2 \\leq 200 \\\\\n    x_1 + x_2 \\leq 150\n         \\end{array} \n                        \\right.\n$$\n\n:::callout-tip\n\n## Interprétation des contraintes\n\n1. La première contrainte indique qu'on ne peut pas produire de quantité négative de voiture,\n2. La seconde contrainte indique qu'on ne peut pas vendre plus de 100 modèles de type **A**,\n3. La troisième contrainte indique qu'on ne peut pas vendre plus de 100 modèles de type **B**,\n4. La quatrième contrainte porte sur le temps de disponibilité de l'usine *(200h)*,\n5. La dernière contrainte indique qu'il est possible de produire au maximum 150 voitures de Type **A** ou **B**, et pas plus.\n\n:::\n\n## Résolution du problème I\n\n### Import des librairies et configuration\n\n::: {#cell-15 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport scipy.optimize as so\nimport matplotlib.pyplot as plt\nfrom rich import print\nfrom rich.panel import Panel\nimport sympy as sym\nimport pandas as pd\nfrom math import pi\n```\n:::\n\n\n::: {#cell-16 .cell execution_count=2}\n``` {.python .cell-code}\nplt.rcParams[\"figure.dpi\"] = 600\n```\n:::\n\n\n### Représentation graphique du problème\n\n> On peut facilement représenter dans un graph en $2D$ l'ensemble des contraintes et proposer une solution graphique au problème puisqu'on dispose uniquement de 2 variables.\n\n::: {#cell-19 .cell execution_count=3}\n``` {.python .cell-code}\nx = np.linspace(0, 150, 500)\ny2 = 200 - 2 * x\ny3 = 150 - x\nz = (350 - 3 * x) / 2\n```\n:::\n\n\n::: {#cell-20 .cell fig-width='50%' fig-height='50%' execution_count=4}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code du graphique `matplotlib`\"}\nplt.hlines(\n    y=100, xmin=0, xmax=150, linewidth=2, color=\"r\", label=\"$x_2 ≤ 100$\", zorder=1\n)\nplt.vlines(\n    x=100, ymin=0, ymax=150, linewidth=2, color=\"m\", label=\"$x_1 ≤ 100$\", zorder=1\n)\nplt.plot(x, y2, label=\"$2x_1 + x_2 \\leq 200 $\", zorder=1)\nplt.plot(x, y3, label=\"$x_1 + x_2 \\leq 150$\", zorder=1)\nplt.plot(x, z, label=\"$z = 350k$\", zorder=1)\n\nplt.scatter(50, 100, color=\"black\", zorder=2)\nplt.fill_between([0, 49.9], [100, 100], [0, 0], hatch=\"//\", color=\"blue\", alpha=0.2)\nplt.fill_between(\n    x,\n    np.min([y2, y3], axis=0),\n    where=y2 < 100,\n    color=\"blue\",\n    alpha=0.2,\n    hatch=\"//\",\n    interpolate=True,\n    label=\"$admissible$\",\n)\n\nplt.xlabel(\"$x_1$\", fontsize=15)\nplt.ylabel(\"$x_2$\", fontsize=15)\nplt.ylim([0, 125])\nplt.xlim([0, 125])\n\nplt.title(\"Ensemble des solutions admissibles\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.0)\n```\n\n::: {.cell-output .cell-output-display}\n![](voitures_files/figure-html/cell-5-output-1.png){fig-align='center'}\n:::\n:::\n\n\n### Mise sous forme normale du problème\n\nOn a 4 équations dans le système des contraintes donc le rang est égal à 4.\n\nLes variables positives sont appelées les variables de base :\n\n$$\n\\beta = \\begin{pmatrix}\nX_1\\\\\nX_2\\\\\nX_3\\\\\nX_4\\\\\n\\end{pmatrix}\n$$\n\nL'idée est ensuite d'exprimer les variables de base en fonction des variables hors base ($x_1$ et $x_2$) $\\Rightarrow$ On réécrit donc le système comme suit :\n\n$$\n\\left \\{ \n\\begin{array}\\\\\n    X_1 = 100 - x_1\\\\\n    X_2 = 100 - x_2\\\\\n    X_3 = 200 - 2x_1 - x_2\\\\\n    X_4 = 150 - x_1 - x_2\\\\\n\\end{array}\n\\right.\n$$\n\n### Résolution avec `scipy`\n\n> Le *submodule* `scipy.optimize` fournit un ensemble de fonctions pour minimiser (ou maximiser) des fonctions objectif, possiblement sujettes à certaines contraintes.\n\nIl faut d'abord écrire les matrices de travail avec `numpy`.\n\n::: {#cell-29 .cell execution_count=5}\n``` {.python .cell-code}\ncost_1 = np.array([3, 2])\nlhs_1 = np.array([[1, 0], [0, 1], [2, 1], [1, 1]])\nrhs_1 = np.array([100, 100, 200, 150])\n```\n:::\n\n\n- `cost_1` correspond à la matrice de coût, *i.e.* les coefficients $M_1$ et $M_2$,\n- `lhs_1`^[**LHS** = *Left Hand Side* / Premier membre d'une équation.] correspond au premier membre de la matrice des contraintes,\n- `rhs_1`^[**RHS** = *Right Hand Side* / Second membre d'une équation.] correspond au second membre de la matrice des contraintes.\n\nPrévisualisons-les avec `sympy`.\n\n::: {#cell-32 .cell execution_count=6}\n``` {.python .cell-code}\ndisplay(sym.Matrix(cost_1))\ndisplay(sym.Matrix(lhs_1))\ndisplay(sym.Matrix(rhs_1))\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n$\\displaystyle \\left[\\begin{matrix}3\\\\2\\end{matrix}\\right]$\n:::\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n$\\displaystyle \\left[\\begin{matrix}1 & 0\\\\0 & 1\\\\2 & 1\\\\1 & 1\\end{matrix}\\right]$\n:::\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n$\\displaystyle \\left[\\begin{matrix}100\\\\100\\\\200\\\\150\\end{matrix}\\right]$\n:::\n:::\n\n\nPour résoudre le problème, on peut utiliser la fonction `linprog` du *submodule* `scipy.optimize`, dont l'algorithme effectue par défaut une minimisation.\n\nComme nous souhaitons plutôt maximiser la fonction objectif, il faut inverser le signe de la fonction de coût.\n\n::: {#cell-34 .cell execution_count=7}\n``` {.python .cell-code}\nresult_1 = so.linprog(-cost_1, A_ub=lhs_1, b_ub=rhs_1, method=\"highs\")\n```\n:::\n\n\nProfitons-en aussi pour créer les fonctions : \n\n- `total_profit` qui retourne le profit total optimal,\n- `details` qui affiche le profit ainsi que les quantités de voitures vendues. \n\n::: {#cell-36 .cell execution_count=8}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code des fonctions\"}\ndef total_profit(result: so._optimize.OptimizeResult, cost: np.ndarray) -> np.float64:\n\n    \"\"\"Retourne le profit total en € lié à la vente de voitures.\"\"\"\n\n    return np.sum(result[\"x\"] * cost * 1000)\n\n\ndef details(result: so._optimize.OptimizeResult, cost: np.ndarray, types: list) -> str:\n    \"\"\"\n    Affiche un message contenant le profit optimal réalisé\n    ainsi que le nombre et le type de voiture vendues.\n    \"\"\"\n    profit = int(total_profit(result, cost))\n    message = f\"\"\"\nLe profit optimal réalisé par [i]Car-Nivor[/i] est de [u]{profit}[/u] € par mois.\n    \n=> Pour :\n    \n\"\"\"\n    for voiture, type_voiture in zip(result[\"x\"], types):\n        message += f\"- {voiture.astype(int)} voitures vendues de [red][b]Type {type_voiture}[/b][/red] \\n\"\n    return Panel(message)\n```\n:::\n\n\nIl suffit maintenant d'appeler la fonction `details` pour obtenir les résultats.\n\n::: {#cell-38 .cell execution_count=9}\n``` {.python .cell-code}\ndetails(result_1, cost_1, [\"A\", \"B\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│                                                                                                                 │\n│ Le profit optimal réalisé par <span style=\"font-style: italic\">Car-Nivor</span> est de <span style=\"text-decoration: underline\">350000</span> € par mois.                                               │\n│                                                                                                                 │\n│ =&gt; Pour :                                                                                                       │\n│                                                                                                                 │\n│ - 50 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type A</span>                                                                                 │\n│ - 100 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type B</span>                                                                                │\n│                                                                                                                 │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n</pre>\n```\n:::\n:::\n\n\n### Effondrement de la demande en modèle **B**\n\n> A cause de constructeurs chinois, *Car-Nivor* ne peut plus écouler qu'un maximum de 50 voitures par mois.\n\n#### Graphique de la situation\n\n::: {#cell-42 .cell fig-width='50%' fig-height='50%' execution_count=10}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code du graphique `matplotlib`\"}\nplt.hlines(y=50, xmin=0, xmax=150, linewidth=2, color=\"r\", label=\"$x_2 ≤ 50$\", zorder=1)\nplt.vlines(\n    x=100, ymin=0, ymax=150, linewidth=2, color=\"m\", label=\"$x_1 ≤ 100$\", zorder=1\n)\n\nz = (325 - 3 * x) / 2\n\nplt.plot(x, y2, label=\"$2x_1 + x_2 \\leq 200 $\", zorder=1)\nplt.plot(x, y3, label=\"$x_1 + x_2 \\leq 150$\", zorder=1)\nplt.plot(x, z, label=\"$z = 325k$\", zorder=1)\n\nplt.scatter(75, 50, color=\"black\", zorder=2)\n\nplt.fill_between(\n    [0, 75],\n    [49.9, 49.9],\n    [0, 0],\n    hatch=\"//\",\n    color=\"blue\",\n    alpha=0.2,\n    interpolate=True,\n    label=\"$admissible$\",\n)\n\nplt.fill_between(\n    x, y2, hatch=\"//\", color=\"blue\", where=y2 < 50, alpha=0.2, interpolate=True\n)\n\nplt.xlabel(\"$x_1$\", fontsize=15)\nplt.ylabel(\"$x_2$\", fontsize=15)\nplt.ylim([0, 125])\nplt.xlim([0, 125])\nplt.title(\"Ensemble des solutions admissibles\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.0)\n```\n\n::: {.cell-output .cell-output-display}\n![](voitures_files/figure-html/cell-11-output-1.png){fig-align='center'}\n:::\n:::\n\n\nPour une résolution numérique\n, il suffit simplement de changer le second membre de la matrice des contraintes.\n\n::: {#cell-44 .cell execution_count=11}\n``` {.python .cell-code}\nrhs_2 = np.array([100, 50, 200, 150])\n```\n:::\n\n\n::: {#cell-45 .cell execution_count=12}\n``` {.python .cell-code}\nresult_2 = so.linprog(-cost_1, A_ub=lhs_1, b_ub=rhs_2, method=\"highs\")\n```\n:::\n\n\n::: {#cell-46 .cell execution_count=13}\n``` {.python .cell-code}\ndetails(result_2, cost_1, [\"A\", \"B\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│                                                                                                                 │\n│ Le profit optimal réalisé par <span style=\"font-style: italic\">Car-Nivor</span> est de <span style=\"text-decoration: underline\">325000</span> € par mois.                                               │\n│                                                                                                                 │\n│ =&gt; Pour :                                                                                                       │\n│                                                                                                                 │\n│ - 75 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type A</span>                                                                                 │\n│ - 50 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type B</span>                                                                                 │\n│                                                                                                                 │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n</pre>\n```\n:::\n:::\n\n\n***\n\nOn voit qu'un effondrement de la demande en voiture de Type **B** entraîne une surproduction de voitures de Type **A**, mais que cette surproduction ne permet pas d'obtenir le profit optimal avant l'effondrement de la demande de Type **B**.\n\n### Analyse détaillée du problème\n\nOn veut étudier graphiquement l'évolution du profit en fonction du nombre maximal de voitures vendues de type **B**.\n\n> Pour faire ceci, je vais utiliser une boucle `for` et faire varier le second membre de la contrainte pour $x_2$.\n\n::: {#cell-52 .cell execution_count=14}\n``` {.python .cell-code}\nlist_x2 = [x for x in range(0, 101)]\ncost_2 = np.array([3, 2])\nlhs_2 = np.array([[1, 0], [0, 1], [2, 1], [1, 1]])\n\nx1_vente = list()\nx2_vente = list()\nprofit = list()\n\nfor x2_max in list_x2:\n    rhs_2 = np.array([100, x2_max, 200, 150])\n    max_bagnole = so.linprog(-cost_2, A_ub=lhs_2, b_ub=rhs_2, method=\"highs\")\n    x1_vente.append(max_bagnole[\"x\"][0])\n    x2_vente.append(max_bagnole[\"x\"][1])\n    profit.append(-max_bagnole[\"fun\"] * 1000)\n```\n:::\n\n\n::: {#cell-53 .cell fig-width='50%' fig-height='50%' execution_count=15}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code du graphique `matplotlib`\"}\nplt.plot(list_x2, profit)\nplt.xlabel(\"Valeur max de $x_2$\")\nplt.ylabel(\"Profit en €\")\nplt.hlines(y=325000, xmin=0, xmax=50, linewidth=2, linestyles=\"--\", color=\"m\")\nplt.vlines(x=50, ymin=300000, ymax=325000, linewidth=2, linestyles=\"--\", color=\"m\")\n\nplt.hlines(y=350000, xmin=0, xmax=100, linewidth=2, linestyles=\"--\", color=\"m\")\nplt.vlines(x=100, ymin=300000, ymax=350000, linewidth=2, linestyles=\"--\", color=\"m\")\n\nplt.scatter(50, 325000, color=\"red\", zorder=2, label=\"π2 = 325k\")\nplt.scatter(100, 350000, color=\"green\", zorder=2, label=\"π1 = 350k\")\n\nplt.ylim([300000, 351000])\nplt.xlim([0, 105])\nplt.title(\n    f\"Profit optimal en fonction de la valeur de $x_2$ compris entre [{list_x2[0]}:{list_x2[-1]}] \"\n)\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.0)\n```\n\n::: {.cell-output .cell-output-display}\n![](voitures_files/figure-html/cell-16-output-1.png){fig-align='center'}\n:::\n:::\n\n\nOn remarque que le profit est croissant en fonction de la valeur maximale de $x_2$ (c'est à dire de voitures vendues de type **B**), ce dont on pouvait se douter étant donné les résultats précédents.\n\n## Introduction au problème II\n\nUn manager propose de dessiner deux nouveaux modèles de luxe pour se distinguer des constructeurs chinois : le **Lion (C)** et le **Shark (D)**. Les bénéfices de ces deux modèles sont de respectivement 5 000 et 10 000 €.\n\nNéanmoins, la demande de ces modèles de luxe est assez limitée : 30 unités au total. \n\n- La demande mensuelle totale de voiture est toujours de 150.\n- La disponibilité de l'usine est toujours de 200 heures.\n- Le modèle **C** prend au total 5 heures de construction tandis que le modèle **D** en prend 8.\n\n## Modélisation du problème II\n\nOn considère les notations suivantes :\n\n- $x_1, x_2, x_3, x_4$ sont les quantités vendues de modèle **A, B, C, D**,\n- $M_1, M_2, M_3, M_4$ est le bénéfice en k€ par unité vendue de modèle **A, B, C, D**,\n- $z$ est le profit de *Car-nivor*, qu'on souhaite maximiser -- on parle de **fonction objectif**,\n- $S$ correspond à l'ensemble des contraintes du problème.\n\n***\n\n$$\n\\max_{slc \\hspace{1mm} (S)} z = 3x_1 + 2x_2 + 5x_3 + 10x_4\n$$\n\n$$\n(S) : \\left \\{ \n\\begin{array}\\\\\n    x_1\\geq 0 \\hspace{0.1em} ; \\hspace{0.1em} x_2 \\geq 0\\\\\n    x_1 \\leq 100 \\\\\n    x_2 \\leq 100 \\\\\n    x_3 \\leq 30 \\\\\n    x_4 \\leq 30 \\\\\n    2x_1 + x_2 + 5x_3 + 8x_4\\leq 200 \\\\\n    x_1 + x_2 + x_3 + x_4 \\leq 150\n\\end{array} \n\\right.\n$$\n\n## Résolution du problème II\n\n:::callout-warning\n\n## Attention\n\nNous ne pouvons plus représenter graphiquement la situation, la résolution va donc uniquement se poursuivre en utilisant `scipy`.\n\n:::\n\n### Résolution avec `scipy`\n\nOn procède aux mêmes étapes que dans la section précédente en écrivant les matrices de travail avec `numpy`.\n\n::: {#cell-66 .cell execution_count=16}\n``` {.python .cell-code}\ncost_3 = np.array([3, 2, 5, 10])\nlhs_3 = np.array(\n    [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [2, 1, 5, 8], [1, 1, 1, 1]]\n)\nrhs_3 = np.array([100, 100, 30, 30, 200, 150])\n```\n:::\n\n\n::: {#cell-67 .cell execution_count=17}\n``` {.python .cell-code}\nresult_3 = so.linprog(-cost_3, A_ub=lhs_3, b_ub=rhs_3, method=\"highs\")\n```\n:::\n\n\n::: {#cell-68 .cell execution_count=18}\n``` {.python .cell-code}\ndetails(result_3, cost_3, [\"A\", \"B\", \"C\", \"D\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│                                                                                                                 │\n│ Le profit optimal réalisé par <span style=\"font-style: italic\">Car-Nivor</span> est de <span style=\"text-decoration: underline\">350000</span> € par mois.                                               │\n│                                                                                                                 │\n│ =&gt; Pour :                                                                                                       │\n│                                                                                                                 │\n│ - 50 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type A</span>                                                                                 │\n│ - 100 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type B</span>                                                                                │\n│ - 0 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type C</span>                                                                                  │\n│ - 0 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type D</span>                                                                                  │\n│                                                                                                                 │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n</pre>\n```\n:::\n:::\n\n\n$\\Rightarrow$ Dans cette configuration, *Car-Nivor* n'a pas intérêt à produire des voitures de luxe de Type **C** ou **D**.\n\n### La disponibilité de l'usine double\n\n> Dans le cadre du *Plan de relance pour l'industrie*, des aides conséquentes permettent à *Car-Nivor* de doubler le temps de disponibilité de l'usine pour atteindre 400 heures.\n\nPour résoudre le problème il suffit simplement de changer le second membre de la matrice des contraintes en remplaçant 200 par 400.\n\n::: {#cell-73 .cell execution_count=19}\n``` {.python .cell-code}\nrhs_4 = np.array([100, 100, 30, 30, 400, 150])\n```\n:::\n\n\n::: {#cell-74 .cell execution_count=20}\n``` {.python .cell-code}\nresult_4 = so.linprog(-cost_3, A_ub=lhs_3, b_ub=rhs_4, method=\"highs\")\n```\n:::\n\n\n::: {#cell-75 .cell execution_count=21}\n``` {.python .cell-code}\ndetails(result_4, cost_3, [\"A\", \"B\", \"C\", \"D\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│                                                                                                                 │\n│ Le profit optimal réalisé par <span style=\"font-style: italic\">Car-Nivor</span> est de <span style=\"text-decoration: underline\">580000</span> € par mois.                                               │\n│                                                                                                                 │\n│ =&gt; Pour :                                                                                                       │\n│                                                                                                                 │\n│ - 40 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type A</span>                                                                                 │\n│ - 80 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type B</span>                                                                                 │\n│ - 0 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type C</span>                                                                                  │\n│ - 30 voitures vendues de <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">Type D</span>                                                                                 │\n│                                                                                                                 │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n</pre>\n```\n:::\n:::\n\n\n:::callout-note\n\nUn doublement de la disponibilité horaire entraîne la production de voitures de luxe de type **D**, ainsi qu'une augmentation substantielle du profit de *Car-Nivor*.\n\n:::\n\n### Impact du temps de disponibilité de l'usine sur la stratégie de l'entreprise.\n\n> Etudions l'impact du temps de disponibilité en utilisant des tranches de 100h de disponibilité mensuelle.\n\n::: {#cell-79 .cell execution_count=22}\n``` {.python .cell-code}\nlist_time = [100 * hours for hours in range(1, 11)]\ncost_4 = np.array([3, 2, 5, 10])\nlhs_4 = np.array(\n    [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [2, 1, 5, 8], [1, 1, 1, 1]]\n)\n\nx1_vente = list()\nx2_vente = list()\nx3_vente = list()\nx4_vente = list()\nprofit = list()\n\nfor hours in list_time:\n    rhs_4 = np.array([100, 100, 30, 30, hours, 150])\n    max_bagnole = so.linprog(-cost_4, A_ub=lhs_4, b_ub=rhs_4, method=\"highs\")\n    x1_vente.append(max_bagnole[\"x\"][0])\n    x2_vente.append(max_bagnole[\"x\"][1])\n    x3_vente.append(max_bagnole[\"x\"][2])\n    x4_vente.append(max_bagnole[\"x\"][3])\n    profit.append(-max_bagnole[\"fun\"] * 1000)\n```\n:::\n\n\n::: {#cell-80 .cell fig-width='50%' fig-height='50%' execution_count=23}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code du graphique `matplotlib`\"}\nplt.plot(list_time, profit)\nplt.scatter(600, profit[5], color=\"green\", zorder=2, label=\"π seuil = 720k\")\n\nplt.xlabel(\"Disponibilité horaire\")\nplt.ylabel(\"Profit en €\")\nplt.ylim([180000, 775000])\nplt.xlim([90, 800])\nplt.title(\n    f\"Profit optimal en fonction de la disponibilité horaire de l'usine \\n compris entre [{list_time[0]}:{list_time[-1]}] heures\"\n)\n\nplt.hlines(\n    y=profit[5], xmin=0, xmax=600, linewidth=2, linestyles=\"--\", color=\"m\", zorder=1\n)\nplt.vlines(\n    x=600, ymin=0, ymax=profit[5], linewidth=2, linestyles=\"--\", color=\"m\", zorder=1\n)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.0)\n```\n\n::: {.cell-output .cell-output-display}\n![](voitures_files/figure-html/cell-24-output-1.png){fig-align='center'}\n:::\n:::\n\n\nGraphiquement, on remarque qu'il y n'y a plus intérêt à augmenter la disponibilité horaire à partir de 600 heures puisqu'on satisfait la contrainte de la demande de voiture $D_{x_i} = 150$ et que le profit n'augmente plus à partir de ce point.\n\nOn peut, en plus, représenter le nombre de voitures vendues selon leur type en faisant varier la disponibilité horaire.\n\n::: {#cell-83 .cell fig-width='50%' fig-height='50%' execution_count=24}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code du graphique `matplotlib`\"}\nplt.plot(list_time, x1_vente, label=\"Type A\")\nplt.plot(list_time, x2_vente, label=\"Type B\")\nplt.plot(list_time, x3_vente, label=\"Type C\")\nplt.plot(list_time, x4_vente, label=\"Type D\")\nplt.xlabel(\"Disponibilité horaire\")\nplt.ylabel(\"Nombre de voitures vendues\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.0)\n```\n\n::: {.cell-output .cell-output-display}\n![](voitures_files/figure-html/cell-25-output-1.png){fig-align='center'}\n:::\n:::\n\n\n:::callout-note\n\nSi initialement les voitures de type **B** sont favorisées, on voit que *Car-Nivor* en produit de moins en moins pour focaliser sa production sur les type **A**, et dès qu'elle le peut, elle commence à produire des voitures de Type **D**. Pour finir, elle choisit de compléter sa production avec des voitures de Type **C**.\n\n:::\n\n## Introduction au problème III\n\n> L'usine de production fait remarquer à la direction que les flux de matières premières sont tendus et demande de les prendre en compte pour faire des modèles plus réalistes. Pour ce faire, elle crée le tableau suivant :\n\n\n\n::: {#cell-88 .cell execution_count=26}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Type A</th>\n      <th>Type B</th>\n      <th>Type C</th>\n      <th>Type D</th>\n      <th>Limite des stocks mensuels</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Fer</th>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>125</td>\n    </tr>\n    <tr>\n      <th>Cuivre</th>\n      <td>0.2</td>\n      <td>0.2</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>55</td>\n    </tr>\n    <tr>\n      <th>Aluminium</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>300</td>\n    </tr>\n    <tr>\n      <th>Acier</th>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>Caoutchouc</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.5</td>\n      <td>0.8</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <th>Terres rares</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>Verre</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.2</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>Tissu</th>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>220</td>\n    </tr>\n    <tr>\n      <th>Cuir</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>30</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::callout-caution\n\n## Section en travaux\n\n🐱‍🚀 Patience, ça arrive... {{< iconify svg-spinners:bars-scale-fade >}}\n\n:::\n\n",
    "supporting": [
      "voitures_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}