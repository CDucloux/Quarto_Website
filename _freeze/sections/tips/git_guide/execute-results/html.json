{
  "hash": "4f46ac2ec05b4ce612976f16e2ce8c61",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"{{< fa brands git-alt >}} Git' it\"\nauthor: \"`Corentin DUCLOUX`\"\ninclude-in-header: \n  text: |\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n---\n\n## Contexte\n\n:::: {layout=\"[ 50, 50 ]\"}\n\n::: {#first-column}\n\n![üßΩ Bob se met √† **Git**](imgs/spongebob_confused.jpg){.lightbox}\n\n:::\n\n::: {#second-column}\n\nPour impressionner son patron, *Bob* souhaite inventer une nouvelle recette de p√¢t√© de crabe‚Ñ¢ r√©volutionnaire (dit-il).\n\nMalheureusement, *Bob* change tr√®s souvent d'avis : au fur et √† mesure de ses exp√©rimentations culinaires, il ajoute et retire un grand nombre d'ingr√©dients dans sa recette.\n\nDe plus, *Bob* n'est pas tr√®s assidu et oublie de noter l'ensemble des changements d'une version de recette √† l'autre. Finalement, il ne retrouve plus sa recette pr√©f√©r√©e dans ses notes...\n\nPar chance, *Bob* se souvient d'avoir entendu son ami *Patrick* raconter tout un tas de belles histoires sur **Git**, un \"syst√®me de contr√¥le de version\" (honn√™tement, *Bob* ne sait pas du tout ce que √ßa veut dire).\n\nAvec une grande pr√©sence d'esprit, *Bob* d√©cide alors de jeter toutes ses exp√©rimentations √† la poubelle, et de repartir sur de bonnes bases.\n:::\n\n::::\n\n## Le contr√¥le de version\n\n\n::: {.callout-note}\n\nUn syst√®me de contr√¥le de version permet d'enregistrer les modifications apport√©es √† un fichier ou un ensemble de fichiers au fil du temps pour pouvoir √©ventuellement revenir √† des versions sp√©cifiques ult√©rieurement, comparer des modifications, voir qui a introduit un probl√®me et quand, etc. \n\n:::\n\nLe contr√¥le de version le plus utilis√© est aussi le plus intuitif : copier des fichiers dans un autre r√©pertoire. Cette approche simple est particuli√®rement sujette aux erreurs, comme *Bob* l'a d√©montr√©.\n\nDans ce guide, *Patrick* va donc aider *Bob* √† faire du contr√¥le de version pour son projet de recette.\n\n## L'histoire de Git\n\n**Git** est un DVCS^[Syst√®me de contr√¥le de version distribu√©.] open source cr√©√© par *Linus Torvalds* en 2005 pour remplacer **BitKeeper** en tant que  syst√®me de contr√¥le de version du kernel {{< fa brands linux >}} [Linux](https://fr.wikipedia.org/wiki/Linux).\n\n## Architecure d'un repository Git\n\nUn repository ou d√©p√¥t **Git** contient 3 zones principales :\n\n1. **Working Directory** : Espace de travail classique\n2. **Staging Area** : Espace de transit des fichiers *(Index)*\n3. **Local Repository** : Historique de commits Git  \n\n\n```{mermaid}\n%%| fig-align: center\ngraph LR;\n    A[\"fa:fa-folder-tree Working Directory\"]:::wd\n    B[\"fa:fa-copy Staging Area\"]:::staging\n    C[\"fa:fa-database Local Repository\"]:::repo\n    A -. <code>git add</code> .-> B\n    B -. <code>git commit</code> .-> C\n\n    classDef wd fill:#f54d27, color:#fff\n    classDef staging fill:#ffc500, color:#fff\n    classDef repo fill:#00909a, color:#fff\n```\n\n\n## Utilisation de Git\n\n### Initialisation d'un repository\n\nApr√®s avoir pr√©alablement cr√©e un dossier vide pour sa recette, *Bob* doit se positionner dedans. *Patrick* lui explique qu'il faut utiliser la commande `cd` (change directory), puis `git init` pour initialiser le **repository**. \n\n```bash\ncd C:/Users/Bob/recipe\n```\n\n```bash\ngit init\n```\nUne fois cette commande √©x√©cut√©e, *Bob* remarque l'apparition d'un nouveau sous-r√©pertoire *.git* cach√© qui contient tous les fichiers n√©cessaires pour le repository. \n\n### Clonage de repository\n\nM√™me si cette option n'int√©resse pas *Bob*, *Patrick* lui explique qu'il est m√™me possible de cloner un projet existant, par exemple   : \n\n```bash\ngit clone https://github.com/CDucloux/Quarto_Website.git\n```\n\n::: {#bbe5026f .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# D√©finir les param√®tres de l'√©toile de mer\nnum_points = 5\nradius = 10\ninner_radius = 5\n\n# Calculer les angles pour les points de l'√©toile\nangles = np.linspace(0, 2 * np.pi, num_points, endpoint=False)\nangles = np.repeat(angles, 2)\nangles[1::2] += np.pi / num_points\n\n# Calculer les rayons pour les points de l'√©toile\nradii = np.zeros_like(angles)\nradii[::2] = radius\nradii[1::2] = inner_radius\n\n# Tracer l'√©toile de mer\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"polar\"})\nax.fill(angles, radii, color=\"#eaa9aa\", edgecolor=\"k\")\n\n# Supprimer les labels et les axes\nax.set_yticklabels([])  # Supprimer les labels des rayons\nax.set_xticks([])  # Supprimer les labels des angles\nax.spines[\"polar\"].set_visible(False)  # Supprimer le cercle ext√©rieur\n\n# Supprimer le fond et les lignes de grille\nax.grid(False)\nax.set_facecolor(\"white\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](git_guide_files/figure-html/cell-2-output-1.png){width=389 height=389}\n:::\n:::\n\n\ngit reflog\n\n- explication strat√©gie de branches ,etc\n\n- .gitignore\n\n- `git flow init`\n\n- `git tag` $\\Rightarrow$ Pour faire des versions\n\ngit hooks\n\npipeline github actions, gitlab actions\n\n‚ö† En pratique on ne code JAMAIS sur la branche `develop`. On ouvre des branches de features puis on les ferme. \n\nExtensions VSCODE :\n\n- Git Graph\n- Conventional Commits\n\n\n```{mermaid}\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%%\ngitGraph\n    commit id: \"initial commit\"\n    branch develop\n    commit id: \"feat(modules): ...\"\n\n```\n\n",
    "supporting": [
      "git_guide_files"
    ],
    "filters": [],
    "includes": {}
  }
}