{"title":"üíª Streamlit","markdown":{"yaml":{"title":"üíª Streamlit","subtitle":"*Le framework qui cartonne*","author":"`Buk`, `Guig's`, le `H` et le `Coc's`","date":"today","date-format":"DD/MM/YYYY","link-external-icon":true,"title-slide-attributes":{"data-background-image":"imgs/streamlit_mark.png","data-background-size":"50%","data-background-opacity":"0.5","data-notes":"Bonjour √† tous, on va vous pr√©senter Streamlit"},"format":{"revealjs":{"theme":["simple","custom.scss"],"background-transition":"fade","incremental":true,"transition":"fade","navigation-mode":"linear","footer":"Pr√©sentation de [*Streamlit*](https://streamlit.io/)","logo":"https://corentinducloux.fr/dossier_img/mecen_transparent.png","include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\">\n"}]}}},"headingText":"Pr√©sentation","containsRefs":false,"markdown":"\n\n\n> Un framework python r√©cent, lanc√© en 2019.\n\nEt avant **Streamlit**, qu'est ce qu'il y avait ?\n\n- **Flask** $\\Rightarrow$ Prise en main tr√®s complexe, plus adapt√©e pour les *Software Engineers*.\n\n- **Plotly Dash** $\\Rightarrow$ Prise en main plus simple que **Flask**, concept assez similaire √† **Shiny** avec s√©paration des composants `UI` et `server`.\n\n:::{.notes}\n*Corentin*\n\n- Flask $\\Rightarrow$ Super Framework pour faire une appli web scalable mais si vous venez d'un background Data c'est vraiment tr√®s tr√®s gal√®re, il faut savoir ce qu'on fait.\n\n- Plotly Dash $\\Rightarrow$ Configuration des inputs, outputs, callbacks.\n\n:::\n\n\n## Pourquoi Streamlit ?\n\n**Objectif** : Simplifier au maximum le d√©veloppement d'applications *Data*.\n\n:::: {.fragment .strike fragment-index=6}\n\n::: {.fragment fragment-index=1}\nUser Interface ?\n:::\n\n::: {.fragment fragment-index=2}\nInputs ?\n:::\n\n::: {.fragment fragment-index=3}\nOutputs ?\n:::\n\n::: {.fragment fragment-index=4}\nInteractions ?\n:::\n\n::: {.fragment fragment-index=5}\nCallbacks ?\n:::\n\n::::\n\n\n:::{.fragment}\n> Et pourquoi pas juste un script <i class=\"fa-brands fa-python\"></i> ?\n:::\n\n:::{.notes}\n*Corentin*\n\n**A dire apr√®s l'objectif : **\n\nA l'√©poque un Data Scientist il faisait son petit Boosting en utilisant sklearn, il faisait une cross-validation, il regardait ses m√©triques et puis si c'√©tait bien il passait √† un autre projet.\n\nEt puis...c'est tout.\n\nEn bref il restait souvent dans son notebook, le mod√®le √©tait assez peu exploitable, et surtout, il √©tait interpr√©table uniquement par les √©quipes Data qui l'avaient fait. Et les Data Scientists ils avaient pas particuli√®rement envie de s'emb√™ter √† apprendre Dash ou m√™me Flask. **Niveau communication des r√©sultats on a vu mieux.**\n\nEt c'est l√† que *Streamlit* arrive avec une id√©e toute simple : au lieu de s√©parer tous les composants logiciels de l'interface utilisateur, on fait juste un script.\n\n:::\n\n## Installation\n\n::: {.callout-tip}\n\n## On passe √† l'installation ?\n\n::: {.nonincremental}\n1. Lancement d'un terminal : <i class=\"fa-solid fa-terminal\"></i>\n2. Et ensuite on installe via `pip` avec la commande\n:::\n\n```powershell\npython -m pip install streamlit\n```\n\n:::\n\n:::{.notes}\n*Aybuk√©*\n\nEst-ce que tt le monde a r√©ussi √† installer du coup ?\n:::\n\n## Prise en main\n\n$\\Rightarrow$ Lan√ßons la d√©mo pour voir de quoi **Streamlit** est capable.\n\n::: {.callout-tip}\n\n## üëã Hello Streamlit\n\n```python\npython -m streamlit hello\n```\n:::\n\n:::{.notes}\n*Aybuk√©*\n\nVous pouvez regarder en d√©tail la d√©mo mais on va pas vraiment se concentrer dessus √©tant donn√© qu'on va construire une petite app nous-m√™me, on trouve que c'est quand m√™me plus int√©ressant.\n:::\n\n## Un premier jet ! {.smaller}\n\n```{.python filename=\"app.py\"}\nimport streamlit as st\n\nst.set_page_config(page_icon=\"üêç\", page_title=\"PyApp\")\nst.title(\"üòé Ma premi√®re app super styl√©e\")\n\nst.markdown(\"Du *markdown* dans l'app ? **Rien de plus simple !**\")\nst.markdown(\"- Lien vers [`streamlit`](https://streamlit.io/)\")\nst.markdown(\n    \"\"\"\n    > Des couleurs ? :orange[orange], :red[rouge], :green[vert]\n    \"\"\"\n)\n\nst.code(\n    \"\"\"\n    [[i for i in range(5)] for j in range(2)] \n    # Du code non-ex√©cutable\n    \"\"\",\n    language=\"python\"\n)\n\nst.divider()\n```\n\n> üöÄ et pour lancer l'appli :\n\n```powershell\npython -m streamlit run app.py\n```\n\n:::{.notes}\n*Aybuk√©*\n:::\n\n## Ce qu'on a vu jusqu'ici\n\n- `st.set_page_config()` pour configurer le favicon et le titre de l'onglet dans le navigateur\n\n- `st.title()` pour donner un titre √† notre app\n\n- `st.markdown()` pour ajouter du texte avec diff√©rents types de formattage : italique, gras, ajout de liens, etc.\n\n- `st.code()` pour inclure du code non-ex√©cutable provenant de diff√©rents langages : `python`, `SQL`, `CSS`, etc.\n\n- `st.divider()` pour tracer une ligne horizontale\n\n:::{.notes}\n*Aybuk√©*\n:::\n\n## Int√©gration de LaTeX\n\nIdentit√© D'*Euler*\n\n$$\ne^{i \\pi} + 1 = 0\n$$\n\nAjoutons ces quelques lignes de code.\n\n```python\nst.header(\"Ajoutons du LaTeX\")\nst.subheader(\"Identit√© d'*Euler*\", divider=\"blue\")\nst.latex(\"e^{i \\pi} + 1 = 0\")\nst.caption(\n    \"\"\"\n    L'identit√© d'*Euler* est souvent cit√©e comme\n    un exemple de beaut√© math√©matique.\n    \"\"\"\n)\n```\n\n:::{.notes}\n*Corentin*\n\nCa c'est quelque chose qui va certainement plaire √† madame Scholler.\n:::\n\n## Pr√©sentation de widgets\n\n> Testons quelques widgets !\n\n::: {.nonincremental}\n- `st.selectbox()`\n- `st.button()`\n:::\n\n```python\nfruit = st.selectbox(\n    \"Fruit\",\n    (\"üçì Fraise\", \"üçä Orange\", \"ü•≠ Mangue\", \"üçå Banane\", \"üçè Pomme\"),\n    index = None,\n    placeholder = \"S√©lectionner un fruit\"\n)\n\nbouton = st.button(\"Voir les d√©tails du fruit s√©lectionn√©\")\n\nif bouton:\n    st.write(f\"T'as la dalle ! Tu veux manger une **{fruit}**\")\n```\n\n:::{.notes}\n*Guillaume*\n\nNotez qu'une fois que vous changez l'input de la `selectbox` dans l'application, l'ensemble du script est r√©-√©x√©cut√©, et donc, le bouton est re-cach√© par d√©faut. \n\nCe **rerun total** qui est la signature de streamlit peut faciliter le d√©veloppement de certaines applis mais peut parfois √™tre assez contraignant.\n\n:::\n\n## Options de layout\n\n- `st.columns()` $\\Rightarrow$ Colonnes\n- `st.container()` $\\Rightarrow$ Conteneur\n- `st.expander()` $\\Rightarrow$ Expandeur\n- `st.tabs()` $\\Rightarrow$ Tabs\n- `st.sidebar()` $\\Rightarrow$ Sidebar\n- `st.popover()` $\\Rightarrow$ Popover\n\n:::{.notes}\n*Hassan*\n\nDe nombreuses options de layout sont disponibles pour modifier l'application.\n\nOn peut ajouter des colonnes, cr√©er des boites flexbox avec les containers, des tabs, une sidebar, etc.\n\n:::\n\n## Colonnes\n\n`colonne_1, colonne_2 = st.columns(2)`\n\n**Explication visuelle par Donald J. Trump**\n\n![](imgs/meme_columns.jpg){fig-align=\"center\" width=\"35%\"}\n\n:::{.notes}\n*Hassan*\n\nLa je vais d'abord vous pr√©senter la cr√©ation de colonnes avec le futur pr√©sident des Etats-Unis.\n\nIl y a plusieurs moyens de g√©rer la taille des colonnes, par d√©faut si on ne met qu'un chiffre qui indique le nombre de colonnes √ßa va diviser la page en 2,3,4, etc.\n\nMais on peut aussi passer une liste avec des floats du type `[0.1, 0.4, 0.4, 0.1]`\n:::\n\n## Sidebar\n\n> On va changer notre interface utilisateur pour ajouter une **Sidebar** et regrouper nos widgets.\n\n```python\nwith st.sidebar:\n    prenom = st.text_input(\"ü§† Ecris ton pr√©nom *cow-boy* !\")\n    reussite = st.checkbox(\"Tu penses avoir ton ann√©e ?\")\n    note_pf = st.number_input(\n        \"Ta note en Concurrence et Innovation\",\n        min_value=0,\n        max_value=5,\n        step=1\n    )\n    epanouissement = st.select_slider(\n        \"Ton √©panouissement en master\",\n        range(11)\n    )\n```\n\n:::{.notes}\n*Aybuk√©*\n\nLa notation with permet de dire avec quel objet du layout on travaille. La, on voit qu'on travaille avec notre sidebar et qu'on lui ajoute des inputs.\n\n:::\n\n## Tabs\n\n> On va ajouter quelques onglets **(Tabs)** √† notre application pour diversifier l'interface.\n\n```python\ntab_1, tab_2, tab_3 = st.tabs(\n    [\"üîé Infos sur l'ann√©e\", \"üìÑ DataFrame\", \"üìä Graphiques\"]\n)\n\nif prenom:\n    with tab_1:\n        if reussite:\n            st.balloons()\n            st.write(f\"F√©licitations pour ton ann√©e *{prenom}* ! üéà\")\n        else:\n            st.snow()\n            st.write(\n                f\"**Aie Aie Aie**... ü•∂ va falloir taffer *{prenom}*\"\n            )\n```\n\n:::{.notes}\n*Guillaume*\n\nOn va en plus vous faire crouler sous les ballons et la neige maintenant.\n:::\n\n## Des messages de statut {.smaller}\n\n- ‚ÑπÔ∏è `st.info()`\n- ‚ùå `st.error()`  \n- ‚ö†Ô∏è `st.warning()`\n- ‚úÖ `st.success()`\n\n```python\nwith st.sidebar:\n    with st.expander(\"On regarde quelques messages ?\"):\n        st.info(\n            f\"Ton √©panouissement en master : {epanouissement}/10\",\n            icon=\"üë®‚Äçüè´\"\n        )\n        st.error(\n            f\"Ta note en Concurrence et Innovation : {note_pf}\",\n            icon=\"üëÄ\"\n        )\n        st.warning(\"Ceci est un avertissement g√©n√©rique\", icon=\"‚ö†\")\n        st.success(\"Message de r√©ussite.\", icon=\"‚úÖ\")\n```\n\n:::{.notes}\n*Hassan*\n\nSur Streamlit, il existe aussi des conteneurs color√©s sp√©ciaux qui sont adapt√©s pour l'affichage d'erreurs, d'infos, d'avertissements. On va les rergarder un petit peu ensemble.\n:::\n\n## Et avec des vraies donn√©es ? (I)\n\n> On a vu tout un tas d'√©l√©ments d'`UI`, mais on a pas vraiment interragi avec des donn√©es dignes de ce nom.\n\n![](imgs/meme_polars.jpg){fig-align=\"center\" width=\"75%\"}\n\n$\\Rightarrow$ **Morale de l'histoire** : Installe `polars`\n\n:::{.notes}\n*Corentin*\n\nQuand on pense manipulation de donn√©es en python, on pense `pandas`, mais il est temps de passer √† la vitesse sup√©rieure et d'avoir un truc vraiment rapide.\n:::\n\n## Et avec des vraies donn√©es ? (II)\n\n> Exemple avec des donn√©es de cas de *COVID-19* aux **Etats-Unis** entre 2020 et 2022 : + 2.5 millions de lignes !\n\n```python\nimport polars as pl\n\ndf_covid = pl.read_csv(\n    \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n)\n```\n\n::: {.callout-warning}\n\n## Probl√®mes\n\n- L'import met trois ans\n- En plus, chaque action dans l'appli relance l'import...\n:::\n\n:::{.notes}\n*Corentin*\n:::\n\n## On est pas rendus...\n\n![](imgs/meme_skeleton.jpeg){fig-align=\"center\" width=\"35%\"}\n\n:::{.notes}\n*Corentin*\n:::\n\n## Solution (I)\n\n![](imgs/cache_decorator.png){fig-align=\"center\" width=\"75%\"}\n\n**Deux d√©corateurs tr√®s utiles** :\n\n`@st.cache_data` et `@st.cache_resource`\n\n::: {.notes}\n*Corentin*\n\nPour le premier d√©corateur, imaginez que vous ayez un dataframe de 2,5 millions lignes, √ßa va devenir assez encombrant que chaque interaction relance enti√®rement l'appli, et donc l'import des donn√©es peut se faire en une fois, et ensuite les donn√©es vont rester dans le cache du navigateur.\n:::\n\n## Solution (II)\n\n```python\n@st.cache_data\ndef import_covid_usa(link: str) -> pl.DataFrame:\n    \"\"\"Fonction d'import des donn√©es optimis√©e.\"\"\"\n    return pl.read_csv(link)\n```\n\nüí° Et maintenant, observons la diff√©rence !\n\n```python\ndf_covid = import_covid_usa(\n    \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n)\n```\n\n::: {.callout-note}\n\nOn attend une seule fois pour l'import des donn√©es, ce qui est beaucoup plus satisfaisant pour l'utilisateur.\n\n- **Solution la plus optimale ici** : base de donn√©es\n\n:::\n\n:::{.notes}\n*Corentin*\n:::\n\n## Affichage d'un tableau\n\n> On a maintenant envie d'afficher nos donn√©es sous forme de tableau.\n\n```python\nwith tab_2:\n    st.dataframe(\n        df_covid,\n        hide_index=True,\n        use_container_width=True,\n        column_config={\n            \"date\": st.column_config.DateColumn(\"üìÖ Date\", format=\"DD/MM/YYYY\")\n        },\n    )\n```\n\n$\\Rightarrow$ Grande flexibilit√© dans l'affichage.\n\n:::{.notes}\n*Hassan*\n\nL'option hide_index permet de cacher la colonne d'indice qui est associ√©e au dataframe.\n\nLa seconde option permet de forcer le tableau √† prendre la taille compl√®te du conteneur. La derni√®re option est probablement la plus int√©ressante parce qu'elle permet de passer un sch√©ma de configuration de colonnes pour les personnaliser.\n:::\n\n## üìä Et pour les graphiques ? {.smaller}\n\n> On va chercher √† visualiser le nombre de morts par √©tat √† une certaine date *(un peu macabre üò∑)*.\n\n```python\nwith tab_3:\n    st.subheader(\"Nombre de personnes mortes de COVID-19 *(No√´l 2020)*\")\n\n    deaths_by_state_christmas = (\n        df_covid.filter(pl.col(\"date\") == \"2020-12-25\")\n        .group_by(\"state\")\n        .agg(pl.col(\"deaths\").sum())\n    )\n\n    st.bar_chart(deaths_by_state_christmas, x=\"state\", y=\"deaths\")\n```\n\n**De nombreuses options de visualisation √† la vol√©e :** \n\n- `st.line_chart()`\n- `st.scatter_chart()`\n- `st.map()`\n- *etc.*\n\n:::{.notes}\n*Aybuk√©*\n\nDans notre code ici, on retrouve un peu de polars mais rien de compliqu√© vous voyez que √ßa ressemble √† la syntaxe de SQL.\n\nPour plus de contr√¥le sur les visualisations on peut utiliser plotly, altair ou matplotlib avec d'autres commandes.\n:::\n\n\n## DeltaGenerator\n\n::: {.callout-tip}\n\n## Mais comment tout √ßa marche ?\n\nAu coeur de tous ces composants permettant de cr√©er l'interface utilisateur, il y a une classe : le `DeltaGenerator`.\n\n- Syst√®me bas√© sur <i class=\"fa-brands fa-google\"></i> *protobuf*, cr√©e par **GOOGLE**\n:::\n\n::: {.notes}\n*Corentin*\n\nEt comme √©videmment les devs de chez Streamlit ils ont pas r√©invent√© la roue ils ont utilis√© un syst√®me de s√©rialisation et d√©s√©rialisation de donn√©es qui a √©t√© cr√©e √† la base par **Google**.\n\nLes messages Delta protobuf dans Streamlit en gros c'est donc des messages qui d√©crivent les modifications √† apporter √† l'interface utilisateur de l'application. Ces messages contiennent des instructions sur la fa√ßon de mettre √† jour ou de modifier les √©l√©ments.\n\nPar exemple les messages d'alerte, la sidebar, ou m√™me les tabs, ce sont tous des composants DeltaGenerator qui sont des conteneurs, on peut le voir si on s'amuse √† utiliser F12 pour inspecter l'appli.\n\n:::\n\n## Pour aller + loin {.smaller}\n\n**Secrets management**\n\n```python\ndef check_password():\n    \"\"\"Returns `True` if the user had the correct password.\"\"\"\n\n    def password_entered():\n        \"\"\"Checks whether a password entered by the user is correct.\"\"\"\n        if hmac.compare_digest(st.session_state[\"password\"], st.secrets[\"password\"]):\n            st.session_state[\"password_correct\"] = True\n            del st.session_state[\"password\"]  # Don't store the password.\n        else:\n            st.session_state[\"password_correct\"] = False\n\n    # Return True if the password is validated.\n    if st.session_state.get(\"password_correct\", False):\n        return True\n\n    # Show input for password.\n    st.text_input(\n        \"Mot de passe\",\n        type=\"password\",\n        on_change=password_entered,\n        key=\"password\",\n        placeholder=\"Veuillez ins√©rer le mot de passe pour acc√©der √† l'application.\",\n    )\n    if \"password_correct\" in st.session_state:\n        st.error(\"üòï Mot de passe incorrect\")\n    return False\n\n\nif not check_password():\n    st.stop()\n```\n\n::: {.notes}\n*Hassan*\n:::\n\n## Exemples d'appli compl√®tes\n\n- üç∑ Projet de Machine Learning du `Coc's` & du `Guig's` : [Wine Scraping](https://wine-scraping.streamlit.app/)\n- üöó Projet de Machine Learning de `Buk` & du `H` : [Esti*my*Car](https://estimycar.streamlit.app/)\n\n<hr>\n\n**API Reference** : <https://docs.streamlit.io/library/api-reference>\n\n::: {.notes}\n*Guillaume*\n:::\n\n## FIN\n\n![](imgs/meme_end.jpg){fig-align=\"center\" width=\"75%\"}\n\n\n:::{.notes}\n*Hassan*\n\nStreamlit devient de plus en plus omnipr√©sent dans le domaine de la data et vous aurez peut-√™tre √† l'utiliser, et en tout cas nous on vous le conseille fortement, et surtout on esp√®re que √ßa vous a plu et que √ßa vous sera utile.\n\n:::\n\n## (Un dernier meme pour la route)\n\n![](imgs/meme_cc.jpg){fig-align=\"center\" width=\"40%\"}\n\n","srcMarkdownNoYaml":"\n\n## Pr√©sentation\n\n> Un framework python r√©cent, lanc√© en 2019.\n\nEt avant **Streamlit**, qu'est ce qu'il y avait ?\n\n- **Flask** $\\Rightarrow$ Prise en main tr√®s complexe, plus adapt√©e pour les *Software Engineers*.\n\n- **Plotly Dash** $\\Rightarrow$ Prise en main plus simple que **Flask**, concept assez similaire √† **Shiny** avec s√©paration des composants `UI` et `server`.\n\n:::{.notes}\n*Corentin*\n\n- Flask $\\Rightarrow$ Super Framework pour faire une appli web scalable mais si vous venez d'un background Data c'est vraiment tr√®s tr√®s gal√®re, il faut savoir ce qu'on fait.\n\n- Plotly Dash $\\Rightarrow$ Configuration des inputs, outputs, callbacks.\n\n:::\n\n\n## Pourquoi Streamlit ?\n\n**Objectif** : Simplifier au maximum le d√©veloppement d'applications *Data*.\n\n:::: {.fragment .strike fragment-index=6}\n\n::: {.fragment fragment-index=1}\nUser Interface ?\n:::\n\n::: {.fragment fragment-index=2}\nInputs ?\n:::\n\n::: {.fragment fragment-index=3}\nOutputs ?\n:::\n\n::: {.fragment fragment-index=4}\nInteractions ?\n:::\n\n::: {.fragment fragment-index=5}\nCallbacks ?\n:::\n\n::::\n\n\n:::{.fragment}\n> Et pourquoi pas juste un script <i class=\"fa-brands fa-python\"></i> ?\n:::\n\n:::{.notes}\n*Corentin*\n\n**A dire apr√®s l'objectif : **\n\nA l'√©poque un Data Scientist il faisait son petit Boosting en utilisant sklearn, il faisait une cross-validation, il regardait ses m√©triques et puis si c'√©tait bien il passait √† un autre projet.\n\nEt puis...c'est tout.\n\nEn bref il restait souvent dans son notebook, le mod√®le √©tait assez peu exploitable, et surtout, il √©tait interpr√©table uniquement par les √©quipes Data qui l'avaient fait. Et les Data Scientists ils avaient pas particuli√®rement envie de s'emb√™ter √† apprendre Dash ou m√™me Flask. **Niveau communication des r√©sultats on a vu mieux.**\n\nEt c'est l√† que *Streamlit* arrive avec une id√©e toute simple : au lieu de s√©parer tous les composants logiciels de l'interface utilisateur, on fait juste un script.\n\n:::\n\n## Installation\n\n::: {.callout-tip}\n\n## On passe √† l'installation ?\n\n::: {.nonincremental}\n1. Lancement d'un terminal : <i class=\"fa-solid fa-terminal\"></i>\n2. Et ensuite on installe via `pip` avec la commande\n:::\n\n```powershell\npython -m pip install streamlit\n```\n\n:::\n\n:::{.notes}\n*Aybuk√©*\n\nEst-ce que tt le monde a r√©ussi √† installer du coup ?\n:::\n\n## Prise en main\n\n$\\Rightarrow$ Lan√ßons la d√©mo pour voir de quoi **Streamlit** est capable.\n\n::: {.callout-tip}\n\n## üëã Hello Streamlit\n\n```python\npython -m streamlit hello\n```\n:::\n\n:::{.notes}\n*Aybuk√©*\n\nVous pouvez regarder en d√©tail la d√©mo mais on va pas vraiment se concentrer dessus √©tant donn√© qu'on va construire une petite app nous-m√™me, on trouve que c'est quand m√™me plus int√©ressant.\n:::\n\n## Un premier jet ! {.smaller}\n\n```{.python filename=\"app.py\"}\nimport streamlit as st\n\nst.set_page_config(page_icon=\"üêç\", page_title=\"PyApp\")\nst.title(\"üòé Ma premi√®re app super styl√©e\")\n\nst.markdown(\"Du *markdown* dans l'app ? **Rien de plus simple !**\")\nst.markdown(\"- Lien vers [`streamlit`](https://streamlit.io/)\")\nst.markdown(\n    \"\"\"\n    > Des couleurs ? :orange[orange], :red[rouge], :green[vert]\n    \"\"\"\n)\n\nst.code(\n    \"\"\"\n    [[i for i in range(5)] for j in range(2)] \n    # Du code non-ex√©cutable\n    \"\"\",\n    language=\"python\"\n)\n\nst.divider()\n```\n\n> üöÄ et pour lancer l'appli :\n\n```powershell\npython -m streamlit run app.py\n```\n\n:::{.notes}\n*Aybuk√©*\n:::\n\n## Ce qu'on a vu jusqu'ici\n\n- `st.set_page_config()` pour configurer le favicon et le titre de l'onglet dans le navigateur\n\n- `st.title()` pour donner un titre √† notre app\n\n- `st.markdown()` pour ajouter du texte avec diff√©rents types de formattage : italique, gras, ajout de liens, etc.\n\n- `st.code()` pour inclure du code non-ex√©cutable provenant de diff√©rents langages : `python`, `SQL`, `CSS`, etc.\n\n- `st.divider()` pour tracer une ligne horizontale\n\n:::{.notes}\n*Aybuk√©*\n:::\n\n## Int√©gration de LaTeX\n\nIdentit√© D'*Euler*\n\n$$\ne^{i \\pi} + 1 = 0\n$$\n\nAjoutons ces quelques lignes de code.\n\n```python\nst.header(\"Ajoutons du LaTeX\")\nst.subheader(\"Identit√© d'*Euler*\", divider=\"blue\")\nst.latex(\"e^{i \\pi} + 1 = 0\")\nst.caption(\n    \"\"\"\n    L'identit√© d'*Euler* est souvent cit√©e comme\n    un exemple de beaut√© math√©matique.\n    \"\"\"\n)\n```\n\n:::{.notes}\n*Corentin*\n\nCa c'est quelque chose qui va certainement plaire √† madame Scholler.\n:::\n\n## Pr√©sentation de widgets\n\n> Testons quelques widgets !\n\n::: {.nonincremental}\n- `st.selectbox()`\n- `st.button()`\n:::\n\n```python\nfruit = st.selectbox(\n    \"Fruit\",\n    (\"üçì Fraise\", \"üçä Orange\", \"ü•≠ Mangue\", \"üçå Banane\", \"üçè Pomme\"),\n    index = None,\n    placeholder = \"S√©lectionner un fruit\"\n)\n\nbouton = st.button(\"Voir les d√©tails du fruit s√©lectionn√©\")\n\nif bouton:\n    st.write(f\"T'as la dalle ! Tu veux manger une **{fruit}**\")\n```\n\n:::{.notes}\n*Guillaume*\n\nNotez qu'une fois que vous changez l'input de la `selectbox` dans l'application, l'ensemble du script est r√©-√©x√©cut√©, et donc, le bouton est re-cach√© par d√©faut. \n\nCe **rerun total** qui est la signature de streamlit peut faciliter le d√©veloppement de certaines applis mais peut parfois √™tre assez contraignant.\n\n:::\n\n## Options de layout\n\n- `st.columns()` $\\Rightarrow$ Colonnes\n- `st.container()` $\\Rightarrow$ Conteneur\n- `st.expander()` $\\Rightarrow$ Expandeur\n- `st.tabs()` $\\Rightarrow$ Tabs\n- `st.sidebar()` $\\Rightarrow$ Sidebar\n- `st.popover()` $\\Rightarrow$ Popover\n\n:::{.notes}\n*Hassan*\n\nDe nombreuses options de layout sont disponibles pour modifier l'application.\n\nOn peut ajouter des colonnes, cr√©er des boites flexbox avec les containers, des tabs, une sidebar, etc.\n\n:::\n\n## Colonnes\n\n`colonne_1, colonne_2 = st.columns(2)`\n\n**Explication visuelle par Donald J. Trump**\n\n![](imgs/meme_columns.jpg){fig-align=\"center\" width=\"35%\"}\n\n:::{.notes}\n*Hassan*\n\nLa je vais d'abord vous pr√©senter la cr√©ation de colonnes avec le futur pr√©sident des Etats-Unis.\n\nIl y a plusieurs moyens de g√©rer la taille des colonnes, par d√©faut si on ne met qu'un chiffre qui indique le nombre de colonnes √ßa va diviser la page en 2,3,4, etc.\n\nMais on peut aussi passer une liste avec des floats du type `[0.1, 0.4, 0.4, 0.1]`\n:::\n\n## Sidebar\n\n> On va changer notre interface utilisateur pour ajouter une **Sidebar** et regrouper nos widgets.\n\n```python\nwith st.sidebar:\n    prenom = st.text_input(\"ü§† Ecris ton pr√©nom *cow-boy* !\")\n    reussite = st.checkbox(\"Tu penses avoir ton ann√©e ?\")\n    note_pf = st.number_input(\n        \"Ta note en Concurrence et Innovation\",\n        min_value=0,\n        max_value=5,\n        step=1\n    )\n    epanouissement = st.select_slider(\n        \"Ton √©panouissement en master\",\n        range(11)\n    )\n```\n\n:::{.notes}\n*Aybuk√©*\n\nLa notation with permet de dire avec quel objet du layout on travaille. La, on voit qu'on travaille avec notre sidebar et qu'on lui ajoute des inputs.\n\n:::\n\n## Tabs\n\n> On va ajouter quelques onglets **(Tabs)** √† notre application pour diversifier l'interface.\n\n```python\ntab_1, tab_2, tab_3 = st.tabs(\n    [\"üîé Infos sur l'ann√©e\", \"üìÑ DataFrame\", \"üìä Graphiques\"]\n)\n\nif prenom:\n    with tab_1:\n        if reussite:\n            st.balloons()\n            st.write(f\"F√©licitations pour ton ann√©e *{prenom}* ! üéà\")\n        else:\n            st.snow()\n            st.write(\n                f\"**Aie Aie Aie**... ü•∂ va falloir taffer *{prenom}*\"\n            )\n```\n\n:::{.notes}\n*Guillaume*\n\nOn va en plus vous faire crouler sous les ballons et la neige maintenant.\n:::\n\n## Des messages de statut {.smaller}\n\n- ‚ÑπÔ∏è `st.info()`\n- ‚ùå `st.error()`  \n- ‚ö†Ô∏è `st.warning()`\n- ‚úÖ `st.success()`\n\n```python\nwith st.sidebar:\n    with st.expander(\"On regarde quelques messages ?\"):\n        st.info(\n            f\"Ton √©panouissement en master : {epanouissement}/10\",\n            icon=\"üë®‚Äçüè´\"\n        )\n        st.error(\n            f\"Ta note en Concurrence et Innovation : {note_pf}\",\n            icon=\"üëÄ\"\n        )\n        st.warning(\"Ceci est un avertissement g√©n√©rique\", icon=\"‚ö†\")\n        st.success(\"Message de r√©ussite.\", icon=\"‚úÖ\")\n```\n\n:::{.notes}\n*Hassan*\n\nSur Streamlit, il existe aussi des conteneurs color√©s sp√©ciaux qui sont adapt√©s pour l'affichage d'erreurs, d'infos, d'avertissements. On va les rergarder un petit peu ensemble.\n:::\n\n## Et avec des vraies donn√©es ? (I)\n\n> On a vu tout un tas d'√©l√©ments d'`UI`, mais on a pas vraiment interragi avec des donn√©es dignes de ce nom.\n\n![](imgs/meme_polars.jpg){fig-align=\"center\" width=\"75%\"}\n\n$\\Rightarrow$ **Morale de l'histoire** : Installe `polars`\n\n:::{.notes}\n*Corentin*\n\nQuand on pense manipulation de donn√©es en python, on pense `pandas`, mais il est temps de passer √† la vitesse sup√©rieure et d'avoir un truc vraiment rapide.\n:::\n\n## Et avec des vraies donn√©es ? (II)\n\n> Exemple avec des donn√©es de cas de *COVID-19* aux **Etats-Unis** entre 2020 et 2022 : + 2.5 millions de lignes !\n\n```python\nimport polars as pl\n\ndf_covid = pl.read_csv(\n    \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n)\n```\n\n::: {.callout-warning}\n\n## Probl√®mes\n\n- L'import met trois ans\n- En plus, chaque action dans l'appli relance l'import...\n:::\n\n:::{.notes}\n*Corentin*\n:::\n\n## On est pas rendus...\n\n![](imgs/meme_skeleton.jpeg){fig-align=\"center\" width=\"35%\"}\n\n:::{.notes}\n*Corentin*\n:::\n\n## Solution (I)\n\n![](imgs/cache_decorator.png){fig-align=\"center\" width=\"75%\"}\n\n**Deux d√©corateurs tr√®s utiles** :\n\n`@st.cache_data` et `@st.cache_resource`\n\n::: {.notes}\n*Corentin*\n\nPour le premier d√©corateur, imaginez que vous ayez un dataframe de 2,5 millions lignes, √ßa va devenir assez encombrant que chaque interaction relance enti√®rement l'appli, et donc l'import des donn√©es peut se faire en une fois, et ensuite les donn√©es vont rester dans le cache du navigateur.\n:::\n\n## Solution (II)\n\n```python\n@st.cache_data\ndef import_covid_usa(link: str) -> pl.DataFrame:\n    \"\"\"Fonction d'import des donn√©es optimis√©e.\"\"\"\n    return pl.read_csv(link)\n```\n\nüí° Et maintenant, observons la diff√©rence !\n\n```python\ndf_covid = import_covid_usa(\n    \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n)\n```\n\n::: {.callout-note}\n\nOn attend une seule fois pour l'import des donn√©es, ce qui est beaucoup plus satisfaisant pour l'utilisateur.\n\n- **Solution la plus optimale ici** : base de donn√©es\n\n:::\n\n:::{.notes}\n*Corentin*\n:::\n\n## Affichage d'un tableau\n\n> On a maintenant envie d'afficher nos donn√©es sous forme de tableau.\n\n```python\nwith tab_2:\n    st.dataframe(\n        df_covid,\n        hide_index=True,\n        use_container_width=True,\n        column_config={\n            \"date\": st.column_config.DateColumn(\"üìÖ Date\", format=\"DD/MM/YYYY\")\n        },\n    )\n```\n\n$\\Rightarrow$ Grande flexibilit√© dans l'affichage.\n\n:::{.notes}\n*Hassan*\n\nL'option hide_index permet de cacher la colonne d'indice qui est associ√©e au dataframe.\n\nLa seconde option permet de forcer le tableau √† prendre la taille compl√®te du conteneur. La derni√®re option est probablement la plus int√©ressante parce qu'elle permet de passer un sch√©ma de configuration de colonnes pour les personnaliser.\n:::\n\n## üìä Et pour les graphiques ? {.smaller}\n\n> On va chercher √† visualiser le nombre de morts par √©tat √† une certaine date *(un peu macabre üò∑)*.\n\n```python\nwith tab_3:\n    st.subheader(\"Nombre de personnes mortes de COVID-19 *(No√´l 2020)*\")\n\n    deaths_by_state_christmas = (\n        df_covid.filter(pl.col(\"date\") == \"2020-12-25\")\n        .group_by(\"state\")\n        .agg(pl.col(\"deaths\").sum())\n    )\n\n    st.bar_chart(deaths_by_state_christmas, x=\"state\", y=\"deaths\")\n```\n\n**De nombreuses options de visualisation √† la vol√©e :** \n\n- `st.line_chart()`\n- `st.scatter_chart()`\n- `st.map()`\n- *etc.*\n\n:::{.notes}\n*Aybuk√©*\n\nDans notre code ici, on retrouve un peu de polars mais rien de compliqu√© vous voyez que √ßa ressemble √† la syntaxe de SQL.\n\nPour plus de contr√¥le sur les visualisations on peut utiliser plotly, altair ou matplotlib avec d'autres commandes.\n:::\n\n\n## DeltaGenerator\n\n::: {.callout-tip}\n\n## Mais comment tout √ßa marche ?\n\nAu coeur de tous ces composants permettant de cr√©er l'interface utilisateur, il y a une classe : le `DeltaGenerator`.\n\n- Syst√®me bas√© sur <i class=\"fa-brands fa-google\"></i> *protobuf*, cr√©e par **GOOGLE**\n:::\n\n::: {.notes}\n*Corentin*\n\nEt comme √©videmment les devs de chez Streamlit ils ont pas r√©invent√© la roue ils ont utilis√© un syst√®me de s√©rialisation et d√©s√©rialisation de donn√©es qui a √©t√© cr√©e √† la base par **Google**.\n\nLes messages Delta protobuf dans Streamlit en gros c'est donc des messages qui d√©crivent les modifications √† apporter √† l'interface utilisateur de l'application. Ces messages contiennent des instructions sur la fa√ßon de mettre √† jour ou de modifier les √©l√©ments.\n\nPar exemple les messages d'alerte, la sidebar, ou m√™me les tabs, ce sont tous des composants DeltaGenerator qui sont des conteneurs, on peut le voir si on s'amuse √† utiliser F12 pour inspecter l'appli.\n\n:::\n\n## Pour aller + loin {.smaller}\n\n**Secrets management**\n\n```python\ndef check_password():\n    \"\"\"Returns `True` if the user had the correct password.\"\"\"\n\n    def password_entered():\n        \"\"\"Checks whether a password entered by the user is correct.\"\"\"\n        if hmac.compare_digest(st.session_state[\"password\"], st.secrets[\"password\"]):\n            st.session_state[\"password_correct\"] = True\n            del st.session_state[\"password\"]  # Don't store the password.\n        else:\n            st.session_state[\"password_correct\"] = False\n\n    # Return True if the password is validated.\n    if st.session_state.get(\"password_correct\", False):\n        return True\n\n    # Show input for password.\n    st.text_input(\n        \"Mot de passe\",\n        type=\"password\",\n        on_change=password_entered,\n        key=\"password\",\n        placeholder=\"Veuillez ins√©rer le mot de passe pour acc√©der √† l'application.\",\n    )\n    if \"password_correct\" in st.session_state:\n        st.error(\"üòï Mot de passe incorrect\")\n    return False\n\n\nif not check_password():\n    st.stop()\n```\n\n::: {.notes}\n*Hassan*\n:::\n\n## Exemples d'appli compl√®tes\n\n- üç∑ Projet de Machine Learning du `Coc's` & du `Guig's` : [Wine Scraping](https://wine-scraping.streamlit.app/)\n- üöó Projet de Machine Learning de `Buk` & du `H` : [Esti*my*Car](https://estimycar.streamlit.app/)\n\n<hr>\n\n**API Reference** : <https://docs.streamlit.io/library/api-reference>\n\n::: {.notes}\n*Guillaume*\n:::\n\n## FIN\n\n![](imgs/meme_end.jpg){fig-align=\"center\" width=\"75%\"}\n\n\n:::{.notes}\n*Hassan*\n\nStreamlit devient de plus en plus omnipr√©sent dans le domaine de la data et vous aurez peut-√™tre √† l'utiliser, et en tout cas nous on vous le conseille fortement, et surtout on esp√®re que √ßa vous a plu et que √ßa vous sera utile.\n\n:::\n\n## (Un dernier meme pour la route)\n\n![](imgs/meme_cc.jpg){fig-align=\"center\" width=\"40%\"}\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\">\n"}],"output-file":"presentation.html"},"language":{"toc-title-document":"Table des mati√®res","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"T√©l√©charger le cahier","notebook-preview-download-src":"T√©l√©charger le code source","notebook-preview-back":"Retour √† l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"R√©sum√©","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les r√©f√©rences","section-title-reuse":"R√©utilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit¬†:","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Auteur¬∑rice","title-block-author-plural":"Auteur¬∑rice¬∑s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifi√©","title-block-keywords":"Mots cl√©s","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Download","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copi√©","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un probl√®me","back-to-top":"Retour au sommet","search-no-results-text":"Pas de r√©sultats","search-matching-documents-text":"documents trouv√©s","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre lat√©rale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Th√©or√®me","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"D√©finition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"√âquation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par d√©faut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus r√©cent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur¬∑rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifi√©","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Cat√©gories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots"},"metadata":{"lang":"fr","fig-responsive":false,"quarto-version":"1.4.551","auto-stretch":true,"title":"üíª Streamlit","subtitle":"*Le framework qui cartonne*","author":"`Buk`, `Guig's`, le `H` et le `Coc's`","date":"today","date-format":"DD/MM/YYYY","title-slide-attributes":{"data-background-image":"imgs/streamlit_mark.png","data-background-size":"50%","data-background-opacity":"0.5","data-notes":"Bonjour √† tous, on va vous pr√©senter Streamlit"},"theme":["simple","custom.scss"],"backgroundTransition":"fade","transition":"fade","navigationMode":"linear","footer":"Pr√©sentation de [*Streamlit*](https://streamlit.io/)","logo":"https://corentinducloux.fr/dossier_img/mecen_transparent.png"}}},"projectFormats":["html"]}